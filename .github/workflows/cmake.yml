name: CMake

on:
  push:
    branches: [ master ]
  
env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-12]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2

    - name: install dev dependencies ubuntu-latest
      run: sudo apt update
      if: ${{ matrix.os == 'ubuntu-latest' }}

    - name: Get Conan
      uses: turtlebrowser/get-conan@v1.0
      
    - name: Create default profile
      run: conan profile detect
      
    - name: Update profile
      run: ls #conan profile update settings.compiler.libcxx=libstdc++11 default
      
    - name: Install dependencies
      run: conan install . --build=missing -s build_type=${{env.BUILD_TYPE}} --output-folder=${{github.workspace}}/build

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_TOOLCHAIN_FILE=${{github.workspace}}/build/conan_toolchain.cmake -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} 

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      # Build your program with the given configuration
      run: cd ${{github.workspace}}/build && ctest --output-on-failure
      if: ${{ matrix.os == 'ubuntu-latest' || matrix.os == 'macos-12' }}

    - name: Test windows
      # Build your program with the given configuration
      run: cd ${{github.workspace}}/build && ctest --output-on-failure -C Debug
      if: ${{ matrix.os == 'windows-latest' }}
